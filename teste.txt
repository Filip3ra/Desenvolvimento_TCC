0 20 44 0.96 0.46 		1 13 75 0.70 0.14 		
0 21 43 0.39 0.60 		1 22 81 0.90 0.15 		
0 19 54 0.77 0.53 		1 8 68 0.86 0.91 		
0 4 35 0.67 0.66 		1 33 81 0.14 0.71 		
1 13 50 0.72 0.74 		0 18 87 0.52 0.77 		
1 14 40 0.26 0.64 		0 11 53 0.44 0.80 		
1 7 28 0.62 0.62 		0 34 70 0.18 0.95 		
0 7 35 0.62 0.32 		1 5 59 0.53 0.53 		
0 9 44 0.70 0.93 		1 12 74 0.97 0.30 		
1 25 57 0.77 0.57 		0 5 71 0.19 0.51 		


/////////////// ESTRATÉGIA 1 //////////////////

Aqui estou acessando o vetor processingOrder pois ele 
guarda um vetor com duas posições v<1,2 ...> que representa 
as duas posições das operações do job, que posso usar para
acessar seus dados em cada vetor, eraliness, tardiness, 
processing time, etc.


  // Criar o vetor de pares <job, operação>
  vector<pair<int, int>> jobOperationPairs(sizeVet);
  vector<int> jobCounters(j.nJobs, 0);
  vector<int> v;
  int indexOp = 0;
  int op1, op2 = 0;
  for (int i = 0; i < sizeVet; i++)
  {
    op1 = j.processingOrder[jobsVet[i] - 1][0];
    op2 = j.processingOrder[jobsVet[i] - 1][1];

    // int currentJob = jobsVet[i] - 1; // índice zero
    cout << "job " << jobsVet[i] << ": " << op1 << ", " << op2
         << " operation: " << j.machine[op1]
         << " processing time: " << j.processingTime[op1]
         << " operation: " << j.machine[op2]
         << " processing time: " << j.processingTime[op2]
         << endl;
  }





/////////// FUNÇÕES DE PRINT //////////////////

      // Exibir randomVet e jobsVet ordenados
      cout << "Vetor randomVet ordenado: [";
      cout << fixed << setprecision(3);
      for (int i = 0; i < sizeVet; i++)
      {
        cout << randomVet[i];
        if (i < sizeVet - 1)
          cout << ", ";
      }
      cout << "]" << endl;

      cout << "Vetor jobsVet ordenado: [";
      for (int i = 0; i < sizeVet; i++)
      {
        cout << jobsVet[i];
        if (i < sizeVet - 1)
          cout << ", ";
      }
      cout << "]" << endl;


        /*
  // Imprimir o vetor de pares <job, operação>
  cout << "Vetor de pares <job, operacao>: ";
  for (const auto &pair : jobOperationPairs)
  {
    cout << "<" << pair.first << "," << pair.second << "> ";
  }
  cout << endl;

  // Imprimir o resultado do agendamento

  cout << "Ordem de randomVet (ordenado): ";
  for (double r : randomVet)
    cout << r << " ";

*/
  cout << "\nOrdem de jobsVet (ordenado): ";
  for (int j : jobsVet)
    cout << j << " ";

  /*
   cout << "\nOrdem de operações agendadas: ";
   for (int op : scheduledOps)
     cout << op << " ";
   cout << endl;
   */